{"ast":null,"code":"import * as React from \"rehackt\";\nvar Ctx;\nfunction noop() {}\nexport function useRenderGuard() {\n  if (!Ctx) {\n    // we want the intialization to be lazy because `createContext` would error on import in a RSC\n    Ctx = React.createContext(null);\n  }\n  return React.useCallback(\n  /**\n   * @returns true if the hook was called during render\n   */\n  function () {\n    var orig = console.error;\n    try {\n      console.error = noop;\n      /**\n       * `useContext` can be called conditionally during render, so this is safe.\n       * (Also, during render we would want to throw as a reaction to this anyways, so it\n       * wouldn't even matter if we got the order of hooks mixed up...)\n       *\n       * They cannot however be called outside of Render, and that's what we're testing here.\n       *\n       * Different versions of React have different behaviour on an invalid hook call:\n       *\n       * React 16.8 - 17: throws an error\n       * https://github.com/facebook/react/blob/2b93d686e359c7afa299e2ec5cf63160a32a1155/packages/react/src/ReactHooks.js#L18-L26\n       *\n       * React 18 & 19: `console.error` in development, then `resolveDispatcher` returns `null` and a member access on `null` throws.\n       * https://github.com/facebook/react/blob/58e8304483ebfadd02a295339b5e9a989ac98c6e/packages/react/src/ReactHooks.js#L28-L35\n       */\n      React[\"useContext\" /* hide this from the linter */](Ctx);\n      return true;\n    } catch (e) {\n      return false;\n    } finally {\n      console.error = orig;\n    }\n  }, []);\n}","map":{"version":3,"names":["React","Ctx","noop","useRenderGuard","createContext","useCallback","orig","console","error","e"],"sources":["C:\\Users\\hp\\Desktop\\banque-service\\banque-service\\banque-frontend\\node_modules\\@apollo\\src\\react\\hooks\\internal\\useRenderGuard.ts"],"sourcesContent":["import * as React from \"rehackt\";\n\nlet Ctx: React.Context<null>;\n\nfunction noop() {}\nexport function useRenderGuard() {\n  if (!Ctx) {\n    // we want the intialization to be lazy because `createContext` would error on import in a RSC\n    Ctx = React.createContext(null);\n  }\n\n  return React.useCallback(\n    /**\n     * @returns true if the hook was called during render\n     */ () => {\n      const orig = console.error;\n      try {\n        console.error = noop;\n\n        /**\n         * `useContext` can be called conditionally during render, so this is safe.\n         * (Also, during render we would want to throw as a reaction to this anyways, so it\n         * wouldn't even matter if we got the order of hooks mixed up...)\n         *\n         * They cannot however be called outside of Render, and that's what we're testing here.\n         *\n         * Different versions of React have different behaviour on an invalid hook call:\n         *\n         * React 16.8 - 17: throws an error\n         * https://github.com/facebook/react/blob/2b93d686e359c7afa299e2ec5cf63160a32a1155/packages/react/src/ReactHooks.js#L18-L26\n         *\n         * React 18 & 19: `console.error` in development, then `resolveDispatcher` returns `null` and a member access on `null` throws.\n         * https://github.com/facebook/react/blob/58e8304483ebfadd02a295339b5e9a989ac98c6e/packages/react/src/ReactHooks.js#L28-L35\n         */\n        React[\"useContext\" /* hide this from the linter */](Ctx);\n        return true;\n      } catch (e) {\n        return false;\n      } finally {\n        console.error = orig;\n      }\n    },\n    []\n  );\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,SAAS;AAEhC,IAAIC,GAAwB;AAE5B,SAASC,IAAIA,CAAA,GAAI;AACjB,OAAM,SAAUC,cAAcA,CAAA;EAC5B,IAAI,CAACF,GAAG,EAAE;IACR;IACAA,GAAG,GAAGD,KAAK,CAACI,aAAa,CAAC,IAAI,CAAC;EACjC;EAEA,OAAOJ,KAAK,CAACK,WAAW;EACtB;;;EAEI;IACF,IAAMC,IAAI,GAAGC,OAAO,CAACC,KAAK;IAC1B,IAAI;MACFD,OAAO,CAACC,KAAK,GAAGN,IAAI;MAEpB;;;;;;;;;;;;;;;MAeAF,KAAK,CAAC,YAAY,CAAC,gCAAgC,CAACC,GAAG,CAAC;MACxD,OAAO,IAAI;IACb,CAAC,CAAC,OAAOQ,CAAC,EAAE;MACV,OAAO,KAAK;IACd,CAAC,SAAS;MACRF,OAAO,CAACC,KAAK,GAAGF,IAAI;IACtB;EACF,CAAC,EACD,EAAE,CACH;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}