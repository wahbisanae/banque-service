{"ast":null,"code":"import { maybe } from \"../globals/index.js\";\nvar isReactNative = maybe(function () {\n  return navigator.product;\n}) == \"ReactNative\";\nexport var canUseWeakMap = typeof WeakMap === \"function\" && !(isReactNative && !global.HermesInternal);\nexport var canUseWeakSet = typeof WeakSet === \"function\";\nexport var canUseSymbol = typeof Symbol === \"function\" && typeof Symbol.for === \"function\";\nexport var canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\nexport var canUseDOM = typeof maybe(function () {\n  return window.document.createElement;\n}) === \"function\";\nvar usingJSDOM =\n// Following advice found in this comment from @domenic (maintainer of jsdom):\n// https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n//\n// Since we control the version of Jest and jsdom used when running Apollo\n// Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n// at the end of the user agent string, I believe this case is all we need to\n// check. Testing for \"Node.js\" was recommended for backwards compatibility\n// with older version of jsdom, but we don't have that problem.\nmaybe(function () {\n  return navigator.userAgent.indexOf(\"jsdom\") >= 0;\n}) || false;\n// Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\nexport var canUseLayoutEffect = (canUseDOM || isReactNative) && !usingJSDOM;","map":{"version":3,"names":["maybe","isReactNative","navigator","product","canUseWeakMap","WeakMap","global","HermesInternal","canUseWeakSet","WeakSet","canUseSymbol","Symbol","for","canUseAsyncIteratorSymbol","asyncIterator","canUseDOM","window","document","createElement","usingJSDOM","userAgent","indexOf","canUseLayoutEffect"],"sources":["C:\\Users\\hp\\Desktop\\banque-service\\banque-service\\banque-frontend\\node_modules\\@apollo\\src\\utilities\\common\\canUse.ts"],"sourcesContent":["import { maybe } from \"../globals/index.js\";\n\nconst isReactNative = maybe(() => navigator.product) == \"ReactNative\";\n\nexport const canUseWeakMap =\n  typeof WeakMap === \"function\" &&\n  !(isReactNative && !(global as any).HermesInternal);\n\nexport const canUseWeakSet = typeof WeakSet === \"function\";\n\nexport const canUseSymbol =\n  typeof Symbol === \"function\" && typeof Symbol.for === \"function\";\n\nexport const canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;\n\nexport const canUseDOM =\n  typeof maybe(() => window.document.createElement) === \"function\";\n\nconst usingJSDOM: boolean =\n  // Following advice found in this comment from @domenic (maintainer of jsdom):\n  // https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327\n  //\n  // Since we control the version of Jest and jsdom used when running Apollo\n  // Client tests, and that version is recent enought to include \" jsdom/x.y.z\"\n  // at the end of the user agent string, I believe this case is all we need to\n  // check. Testing for \"Node.js\" was recommended for backwards compatibility\n  // with older version of jsdom, but we don't have that problem.\n  maybe(() => navigator.userAgent.indexOf(\"jsdom\") >= 0) || false;\n\n// Our tests should all continue to pass if we remove this !usingJSDOM\n// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,\n// if we allow useLayoutEffect, then useSyncExternalStore generates many\n// warnings about useLayoutEffect doing nothing on the server. While these\n// warnings are harmless, this !usingJSDOM condition seems to be the best way to\n// prevent them (i.e. skipping useLayoutEffect when using jsdom).\nexport const canUseLayoutEffect = (canUseDOM || isReactNative) && !usingJSDOM;\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,qBAAqB;AAE3C,IAAMC,aAAa,GAAGD,KAAK,CAAC;EAAM,OAAAE,SAAS,CAACC,OAAO;AAAjB,CAAiB,CAAC,IAAI,aAAa;AAErE,OAAO,IAAMC,aAAa,GACxB,OAAOC,OAAO,KAAK,UAAU,IAC7B,EAAEJ,aAAa,IAAI,CAAEK,MAAc,CAACC,cAAc,CAAC;AAErD,OAAO,IAAMC,aAAa,GAAG,OAAOC,OAAO,KAAK,UAAU;AAE1D,OAAO,IAAMC,YAAY,GACvB,OAAOC,MAAM,KAAK,UAAU,IAAI,OAAOA,MAAM,CAACC,GAAG,KAAK,UAAU;AAElE,OAAO,IAAMC,yBAAyB,GAAGH,YAAY,IAAIC,MAAM,CAACG,aAAa;AAE7E,OAAO,IAAMC,SAAS,GACpB,OAAOf,KAAK,CAAC;EAAM,OAAAgB,MAAM,CAACC,QAAQ,CAACC,aAAa;AAA7B,CAA6B,CAAC,KAAK,UAAU;AAElE,IAAMC,UAAU;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnB,KAAK,CAAC;EAAM,OAAAE,SAAS,CAACkB,SAAS,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;AAAzC,CAAyC,CAAC,IAAI,KAAK;AAEjE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,kBAAkB,GAAG,CAACP,SAAS,IAAId,aAAa,KAAK,CAACkB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}